# Data

## Dataset Description: Analysis of Olive Oil Data

Our project focuses on analyzing various aspects of olive oil, including its chemical composition, trade flows, and price trends. Olive oil, a staple of Mediterranean cuisine, is valued not only for its culinary uses but also for its health benefits and economic importance. The data used in this project has been obtained from the International Olive Council (https://www.internationaloliveoil.org/), which provides comprehensive statistics and insights into the global olive oil industry. These datasets form the foundation for exploring patterns, trends, and market dynamics, aiding in a deeper understanding of the olive oil sector. 

This project involves the following three datasets:


## Chemical Composition of Olive Oil for Various Categories

This dataset examines the chemical composition of olive oil by analyzing the relationships between various fatty acids. It provides insights into the chemical profiles of different olive oil samples, which is crucial for understanding quality, regional characteristics, and classification. The dataset is commonly used in food science, quality assurance, and authentication studies to differentiate olive oils based on their chemical properties. This dataset enables a detailed exploration of how chemical profiles differ across regions, aiding in the identification of quality and origin of olive oil.

### Loading necessary libraries

```{r}
options(warn = -1)
```


```{r}
library(tidyverse)
library(ggplot2)
library(GGally)
library(reshape2)
library(ggparallel)
library(scales)
library(ggalluvial)
library(lubridate)
library(reshape2)
library(viridis)
library(tidyr)
```


### Reading Data: OLIVE OIL COMPOSITION FOR VARIOUS CATEGORIES

```{r}
olive_oil <- read.csv("olive_oil.csv")
head(olive_oil)
```


### Check data summary

```{r}
table(olive_oil$category)

colSums(is.na(olive_oil))
```


### Missing Value Analysis for Chemical Composition of Olive Oil

```{r}
# Check missing values in olive_oil dataset
missing_olive_oil <- colSums(is.na(olive_oil))

# Create a data frame for visualization
missing_olive_oil_df <- data.frame(
  Feature = names(missing_olive_oil),
  MissingValues = missing_olive_oil
)

# Plot missing values
ggplot(missing_olive_oil_df, aes(x = Feature, y = MissingValues)) +
  geom_bar(stat = "identity", fill = "steelblue", alpha = 0.8) +
  geom_text(aes(label = MissingValues), vjust = -0.5) +
  labs(
    title = "Missing Values in Olive Oil Composition Dataset",
    x = "Feature",
    y = "Count of Missing Values"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


### Feature Selection: Correlation Matrix

```{r}
# Identifing feature columns
features_columns <- c("palmitico", "palmitoleico", "stearico", 
                      "oleico", "linoleico", "eicosanoico", 
                      "linolenico")

# Dropping 'category' column to compute correlations
corr <- cor(olive_oil[, features_columns])

# Displaying features with strong correlations
strong_corr <- melt(corr) %>%
  filter(value > 0.5 & Var1 != Var2)
print(strong_corr)
```


### Calculating Number of Bins

```{r}
# Number of bins calculation based on the number of rows
number_of_bins <- 2 * round(sqrt(nrow(olive_oil)))
number_of_bins
```


### Scatter Histogram

```{r}
ggplot(olive_oil, aes(x = palmitico, y = palmitoleico, color = category)) +
  geom_point() +
  geom_density_2d() +
  labs(title = "Scatter plot with density: Palmitico vs Palmitoleico") +
  theme_minimal()
```


### Histograms for Features

```{r}
# Create histograms for each feature
features_hist <- function(data, feature, bins) {
  ggplot(data, aes_string(x = feature)) +
    geom_histogram(aes(y = ..density..), bins = bins, alpha = 0.4, fill = "green") +
    geom_density(color = "red") +
    labs(title = paste("Histogram with density:", feature)) +
    theme_minimal()
}

# Generate histograms for all features
for (feature in features_columns) {
  print(features_hist(olive_oil, feature, number_of_bins))
}
```


### Box Plots

```{r}
# General box plot
ggplot(melt(olive_oil[, features_columns]), aes(x = variable, y = value)) +
  geom_boxplot(outlier.size = 0.5) +
  labs(title = "Boxplots for all features") +
  theme_minimal()

# Box plots for each feature grouped by 'category'
features_boxplot <- function(data, feature) {
  ggplot(data, aes_string(x = "category", y = feature)) +
    geom_boxplot(outlier.size = 0.5) +
    labs(title = paste("Boxplot of", feature, "by Category")) +
    theme_minimal()
}

# Generate box plots for all features by category
for (feature in features_columns) {
  print(features_boxplot(olive_oil, feature))
}
```

### Correlation Heatmap

```{r}
# Plot heatmap of correlations
heatmap_corr <- ggplot(melt(corr), aes(Var1, Var2, fill = value)) +
  geom_tile() +
  geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  labs(title = "Correlation Heatmap") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

heatmap_corr
```

### Parallel Coordinates

```{r}
# Standardize features
olive_oil_standardized <- olive_oil
olive_oil_standardized[, features_columns] <- scale(olive_oil_standardized[, features_columns])

# Parallel coordinates plot
ggparcoord(
  data = olive_oil_standardized,
  columns = which(names(olive_oil_standardized) %in% features_columns),
  groupColumn = "category",
  scale = "globalminmax",
  alphaLines = 0.5
) +
  scale_color_manual(values = c("#00ff45", "#4ECDC4", "#ff0000", "#fff121", "#001dd5")) +
  labs(title = "Parallel Coordinates Plot", x = "Features", y = "Standardized Value") +
  theme_minimal()
```

### Key Insights:

- The scatter plot reveals a compelling relationship between palmitic and palmitoleic acid concentrations across five distinct categories (EL, NA, SA, U, and WL), with the South Apulian (SA) samples displaying a notable positive correlation as they form a diagonal cluster extending from the middle to upper right of the plot (palmitic: 12-18, palmitoleic: 1.5-2.5), while the remaining categories (EL, NA, U, and WL) exhibit tighter clustering in the lower-middle portion with considerable overlap, showing palmitic values between 9-12 and palmitoleic values around 0.5-1.0, with density contours highlighting the concentration of points and a few outliers scattered beyond the main clusters, particularly within the SA group, demonstrating the varying relationships between these fatty acids across different sample categories.

- The parallel coordinates and scatter plots reveal distinct patterns in fatty acid compositions across categories (EL, NA, SA, U, WL). The parallel plot highlights variations in seven fatty acids, with notable peaks in stearico acid for WL (blue lines) and differences in oleico and linoleico acids. The scatter plot emphasizes the relationship between palmitico and palmitoleico acids, showing SA (green) as a distinct cluster with higher values (palmitico: 12-18, palmitoleico: 1.5-2.5), while other categories cluster in the lower-mid range (palmitico: 9-12, palmitoleico: 0.5-1.0). Density contours in the scatter plot further highlight separation between SA and other groups, suggesting unique fatty acid profiles linked to origins or processing methods.


## Olive Oil Prices (2023)

This dataset contains daily price data for different quality categories of olive oil in January 2023. It tracks the prices (in euros per kilogram) for three distinct types of olive oil: Extra Virgin Olive Oil (Premium Quality), Virgin Olive Oil, Lampante Olive Oil.

### Reading Data: OLIVE OIL PRICES 2023

```{r}
df <- read.csv("olive_prices_2023.csv")
colnames(df)
```

### Missing Value Analysis for Olive Oil Prices (2023)

```{r}
# Check missing values in df
df_missing <- colSums(is.na(df))

# Create a data frame for visualization
df_missing_df <- data.frame(
  Feature = names(df_missing),
  MissingValues = df_missing
)

# Plot missing values
ggplot(df_missing_df, aes(x = Feature, y = MissingValues)) +
  geom_bar(stat = "identity", fill = "darkgreen", alpha = 0.8) +
  geom_text(aes(label = MissingValues), vjust = -0.5) +
  labs(
    title = "Missing Values in Olive Oil Prices Dataset (2023)",
    x = "Feature",
    y = "Count of Missing Values"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Function to Plot Olive Oil Prices

```{r}
plot_prices <- function(df, year, save = FALSE) {
  # Convert Date to Date format
  df$Fecha <- as.Date(df$Fecha, format = "%Y-%m-%d")
  
  # Melt data for ggplot
  df_melted <- melt(df, id.vars = "Fecha", variable.name = "Category", value.name = "Price")
  
  # Line Plot
  p <- ggplot(df_melted, aes(x = Fecha, y = Price, color = Category, group = Category)) +
    geom_line(size = 1) +
    labs(
      title = paste("Olive Oil Prices (€/kg) -", year),
      x = "Date",
      y = "Price (€)",
      color = "Category"
    ) +
    theme_minimal() +
    scale_x_date(
      date_breaks = "1 week",
      date_labels = "%Y-%m-%d"
    ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_color_viridis_d()
  
  print(p)
}
```

### Function to Plot Olive Oil Prices with Trendlines

```{r}
plot_prices_with_trend <- function(df, year, save = FALSE) {
  # Convert Date to Date format
  df$Fecha <- as.Date(df$Fecha, format = "%Y-%m-%d")
  
  # Melt data for ggplot
  df_melted <- melt(df, id.vars = "Fecha", variable.name = "Category", value.name = "Price")
  
  # Line Plot with Trendlines
  p <- ggplot(df_melted, aes(x = Fecha, y = Price, color = Category, group = Category)) +
    geom_line(size = 1) +
    geom_smooth(method = "lm", linetype = "dashed", se = FALSE) +
    labs(
      title = paste("Olive Oil Prices with Trendlines (€/kg) -", year),
      x = "Date",
      y = "Price (€)",
      color = "Category"
    ) +
    theme_minimal() +
    scale_x_date(
      date_breaks = "1 week",
      date_labels = "%Y-%m-%d"
    ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_color_viridis_d()
  
  print(p)
}
```

### Function to Plot Heatmap of Monthly Olive Oil Prices

```{r}
plot_heatmap <- function(df, year, save = FALSE) {
  # Convert Fecha to Date format
  df$Fecha <- as.Date(df$Fecha, format = "%Y-%m-%d")
  df$Month <- month(df$Fecha)
  
  # Select the correct column for "Extra Virgin Olive Oil Price"
  df$Price <- df$Precio.Virgen.extra
  
  # Pivot data for heatmap
  df_heatmap <- df %>%
    select(Fecha, Month, Price) %>%
    group_by(Month, Fecha) %>%
    summarize(Price = mean(Price, na.rm = TRUE)) %>%
    spread(Fecha, Price)
  
  # Convert to matrix for heatmap
  heatmap_data <- as.matrix(df_heatmap[,-1])
  rownames(heatmap_data) <- month.name[df_heatmap$Month]
  
  # Heatmap Plot
  heatmap_colors <- viridis::viridis(100)
  
  heatmap(
    heatmap_data,
    Rowv = NA,
    Colv = NA,
    col = heatmap_colors,
    scale = "none",
    margins = c(5, 10),
    main = paste("Heatmap of Monthly Prices (", year, ")", sep = ""),
    xlab = "Date",
    ylab = "Month"
  )
}
```


### Generating Plots

```{r}
plot_prices(df, 2023)
plot_prices_with_trend(df, 2023)
plot_heatmap(df, 2023)
```

### Key Insights:

- The line graph provides an insightful analysis of the price trends for three olive oil grades throughout 2023. The Extra Virgin Olive Oil (Precio.Virgen.extra), represented by a purple line, consistently holds the highest price among the three categories, with values climbing steadily and peaking above €8/kg towards the end of the year. The Virgin Olive Oil (Precio.Virgen), depicted with a teal line, maintains an intermediate price range, exhibiting a similar upward trajectory, albeit at slightly lower levels compared to Extra Virgin Olive Oil. Finally, the Lampante Olive Oil (Precio.Lampante), shown in yellow, reflects the lowest pricing, highlighting its classification as a lower-grade oil. Despite these differences, all three grades display a significant and consistent upward trend, with prices rising from approximately €5/kg at the beginning of 2023 to nearly €8/kg by the year's end. This notable price surge, particularly in the latter half of 2023, underscores shifts in market dynamics, possibly driven by factors like production constraints, increased demand, or economic conditions impacting the olive oil industry globally.


## Flow of Olive Oil Between Countries

This dataset captures the flow of olive oil between various countries or regions. The values represent quantities (e.g., tons or liters) exchanged between exporting and importing countries. It highlights major players in the olive oil trade, their destinations, and trade volumes. This dataset is essential for understanding the international olive oil trade, including major exporting and importing nations and trade dependencies.

### Missing Value Analysis for Flow of Olive Oil Between Countries

```{r}
# Define a function to check and visualize missing values for flow datasets
plot_missing_flows <- function(flow_data, title) {
  # Calculate missing values
  flow_missing <- colSums(is.na(flow_data))

  # Create a data frame for visualization
  flow_missing_df <- data.frame(
    Feature = names(flow_missing),
    MissingValues = flow_missing
  )

  # Plot missing values
  ggplot(flow_missing_df, aes(x = Feature, y = MissingValues)) +
    geom_bar(stat = "identity", fill = "purple", alpha = 0.8) +
    geom_text(aes(label = MissingValues), vjust = -0.5) +
    labs(
      title = title,
      x = "Feature",
      y = "Count of Missing Values"
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
```

### Reading & Plotting Data: FLOW - 2022-2023

```{r}
# Read the CSV file and handle row/column names
flows <- read.csv("FLOWS_1.csv", check.names = FALSE, row.names = 1)
plot_missing_flows(flows, "Missing Values in Flow Dataset (2022-2023)")
```


```{r}
# Remove the "(all)" row and column
flows <- flows[!rownames(flows) %in% "(all)", !colnames(flows) %in% "(all)"]

# Calculate total flows for each source country
flows$TotalFlow <- rowSums(flows, na.rm = TRUE)

# Select the top 5 countries with the highest total flows
top_n <- 5  # Top 5 countries
top_countries <- flows %>%
  arrange(desc(TotalFlow)) %>%
  head(top_n) %>%
  rownames()

# Filter flows to only include the top countries
flows_filtered <- flows[top_countries, ]
flows_filtered <- flows_filtered[, !colnames(flows_filtered) %in% "TotalFlow"]

# Convert the filtered dataset into a long format
flows_long <- flows_filtered %>%
  rownames_to_column(var = "From") %>%
  pivot_longer(cols = -From, names_to = "To", values_to = "Flow") %>%
  filter(!is.na(Flow) & Flow > 0)  # Filter out NA and zero values

# Add a third axis (Region or Category) for visualization purposes
flows_long <- flows_long %>%
  mutate(Category = ifelse(To %in% c("Extra-EU", "Intra-EU"), "EU", "Non-EU"))

# Create a multi-axis alluvial diagram
ggplot(flows_long,
       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +
  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +
  geom_stratum(fill = "grey", color = "black") +
  geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), "\n", after_stat(count))), size = 3) +
  scale_x_discrete(limits = c("From", "Category", "To")) +
  labs(title = "Multi-Axis Flow Between Top 5 Countries (2022-2023)",
       x = "Flow Direction",
       y = "Flow Magnitude") +
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

### Reading  & Plotting Data: FLOW - 2021-2022

```{r}
# Read the CSV file and handle row/column names
flows <- read.csv("FLOWS_2.csv", check.names = FALSE, row.names = 1)
plot_missing_flows(flows, "Missing Values in Flow Dataset (2021-2022)")
```


```{r}
# Remove the "(all)" row and column
flows <- flows[!rownames(flows) %in% "(all)", !colnames(flows) %in% "(all)"]

# Calculate total flows for each source country
flows$TotalFlow <- rowSums(flows, na.rm = TRUE)

# Select the top 5 countries with the highest total flows
top_n <- 5  # Top 5 countries
top_countries <- flows %>%
  arrange(desc(TotalFlow)) %>%
  head(top_n) %>%
  rownames()

# Filter flows to only include the top countries
flows_filtered <- flows[top_countries, ]
flows_filtered <- flows_filtered[, !colnames(flows_filtered) %in% "TotalFlow"]

# Convert the filtered dataset into a long format
flows_long <- flows_filtered %>%
  rownames_to_column(var = "From") %>%
  pivot_longer(cols = -From, names_to = "To", values_to = "Flow") %>%
  filter(!is.na(Flow) & Flow > 0)  # Filter out NA and zero values

# Add a third axis (Region or Category) for visualization purposes
flows_long <- flows_long %>%
  mutate(Category = ifelse(To %in% c("Extra-EU", "Intra-EU"), "EU", "Non-EU"))

# Create a multi-axis alluvial diagram
ggplot(flows_long,
       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +
  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +
  geom_stratum(fill = "grey", color = "black") +
  geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), "\n", after_stat(count))), size = 3) +
  scale_x_discrete(limits = c("From", "Category", "To")) +
  labs(title = "Multi-Axis Flow Between Top 5 Countries (2021-2022)",
       x = "Flow Direction",
       y = "Flow Magnitude") +
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

### Reading  & Plotting Data: FLOW - 2020-2021

```{r}
# Read the CSV file and handle row/column names
flows <- read.csv("FLOWS_3.csv", check.names = FALSE, row.names = 1)
plot_missing_flows(flows, "Missing Values in Flow Dataset (2020-2021)")
```


```{r}
# Remove the "(all)" row and column
flows <- flows[!rownames(flows) %in% "(all)", !colnames(flows) %in% "(all)"]

# Calculate total flows for each source country
flows$TotalFlow <- rowSums(flows, na.rm = TRUE)

# Select the top 5 countries with the highest total flows
top_n <- 5  # Top 5 countries
top_countries <- flows %>%
  arrange(desc(TotalFlow)) %>%
  head(top_n) %>%
  rownames()

# Filter flows to only include the top countries
flows_filtered <- flows[top_countries, ]
flows_filtered <- flows_filtered[, !colnames(flows_filtered) %in% "TotalFlow"]

# Convert the filtered dataset into a long format
flows_long <- flows_filtered %>%
  rownames_to_column(var = "From") %>%
  pivot_longer(cols = -From, names_to = "To", values_to = "Flow") %>%
  filter(!is.na(Flow) & Flow > 0)  # Filter out NA and zero values

# Add a third axis (Region or Category) for visualization purposes
flows_long <- flows_long %>%
  mutate(Category = ifelse(To %in% c("Extra-EU", "Intra-EU"), "EU", "Non-EU"))

# Create a multi-axis alluvial diagram
ggplot(flows_long,
       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +
  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +
  geom_stratum(fill = "grey", color = "black") +
  geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), "\n", after_stat(count))), size = 3) +
  scale_x_discrete(limits = c("From", "Category", "To")) +
  labs(title = "Multi-Axis Flow Between Top 5 Countries (2020-2021)",
       x = "Flow Direction",
       y = "Flow Magnitude") +
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

### Reading  & Plotting Data: FLOW - 2019-2020

```{r}
# Read the CSV file and handle row/column names
flows <- read.csv("FLOWS_4.csv", check.names = FALSE, row.names = 1)
plot_missing_flows(flows, "Missing Values in Flow Dataset (2019-2020)")
```


```{r}
# Remove the "(all)" row and column
flows <- flows[!rownames(flows) %in% "(all)", !colnames(flows) %in% "(all)"]

# Calculate total flows for each source country
flows$TotalFlow <- rowSums(flows, na.rm = TRUE)

# Select the top 5 countries with the highest total flows
top_n <- 5  # Top 5 countries
top_countries <- flows %>%
  arrange(desc(TotalFlow)) %>%
  head(top_n) %>%
  rownames()

# Filter flows to only include the top countries
flows_filtered <- flows[top_countries, ]
flows_filtered <- flows_filtered[, !colnames(flows_filtered) %in% "TotalFlow"]

# Convert the filtered dataset into a long format
flows_long <- flows_filtered %>%
  rownames_to_column(var = "From") %>%
  pivot_longer(cols = -From, names_to = "To", values_to = "Flow") %>%
  filter(!is.na(Flow) & Flow > 0)  # Filter out NA and zero values

# Add a third axis (Region or Category) for visualization purposes
flows_long <- flows_long %>%
  mutate(Category = ifelse(To %in% c("Extra-EU", "Intra-EU"), "EU", "Non-EU"))

# Create a multi-axis alluvial diagram
ggplot(flows_long,
       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +
  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +
  geom_stratum(fill = "grey", color = "black") +
  geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), "\n", after_stat(count))), size = 3) +
  scale_x_discrete(limits = c("From", "Category", "To")) +
  labs(title = "Multi-Axis Flow Between Top 5 Countries (2019-2020)",
       x = "Flow Direction",
       y = "Flow Magnitude") +
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

### Reading  & Plotting Data: FLOW - 2018-2019

```{r}
# Read the CSV file and handle row/column names
flows <- read.csv("FLOWS_5.csv", check.names = FALSE, row.names = 1)
plot_missing_flows(flows, "Missing Values in Flow Dataset (2018-2019)")
```


```{r}
# Remove the "(all)" row and column
flows <- flows[!rownames(flows) %in% "(all)", !colnames(flows) %in% "(all)"]

# Calculate total flows for each source country
flows$TotalFlow <- rowSums(flows, na.rm = TRUE)

# Select the top 5 countries with the highest total flows
top_n <- 5  # Top 5 countries
top_countries <- flows %>%
  arrange(desc(TotalFlow)) %>%
  head(top_n) %>%
  rownames()

# Filter flows to only include the top countries
flows_filtered <- flows[top_countries, ]
flows_filtered <- flows_filtered[, !colnames(flows_filtered) %in% "TotalFlow"]

# Convert the filtered dataset into a long format
flows_long <- flows_filtered %>%
  rownames_to_column(var = "From") %>%
  pivot_longer(cols = -From, names_to = "To", values_to = "Flow") %>%
  filter(!is.na(Flow) & Flow > 0)  # Filter out NA and zero values

# Add a third axis (Region or Category) for visualization purposes
flows_long <- flows_long %>%
  mutate(Category = ifelse(To %in% c("Extra-EU", "Intra-EU"), "EU", "Non-EU"))

# Create a multi-axis alluvial diagram
ggplot(flows_long,
       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +
  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +
  geom_stratum(fill = "grey", color = "black") +
  geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), "\n", after_stat(count))), size = 3) +
  scale_x_discrete(limits = c("From", "Category", "To")) +
  labs(title = "Multi-Axis Flow Between Top 5 Countries (2018-2019)",
       x = "Flow Direction",
       y = "Flow Magnitude") +
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```


### Key Insights:

- The Multi-Axis Flow diagram for years 2018-2019 till 2022-2023 highlights intricate olive oil trade patterns. Spain leads as the top exporter (290,282), followed by Greece (153,938.1) and others like Argentina, Morocco, and Egypt. Flows are split between the EU (336,603.6) and non-EU (273,156.3) regions. Intra-EU trade dominates as the largest recipient (281,371.4), with significant imports by the USA (133,627.5) and Brazil (91,636.8). The diagram illustrates interconnected flows, with Spain and Greece exporting heavily to both EU and non-EU regions, and varying band widths and color-coded streams emphasizing trade complexities and magnitudes.
