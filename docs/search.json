[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OLIVE ORBIT",
    "section": "",
    "text": "1 Introduction\nOlive oil, often referred to as “liquid gold,” plays a vital role in global cuisine, culture, and economies. Through Olive Orbit, we explore trends in olive oil production, consumption, and trade flows from 2019 to 2023. By analyzing this data, we aim to uncover patterns, regional dynamics, and the factors shaping the olive oil industry, providing valuable insights into its global impact.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Dataset Description: Analysis of Olive Oil Data\nOur project focuses on analyzing various aspects of olive oil, including its chemical composition, trade flows, and price trends. Olive oil, a staple of Mediterranean cuisine, is valued not only for its culinary uses but also for its health benefits and economic importance. The data used in this project has been obtained from the International Olive Council (https://www.internationaloliveoil.org/), which provides comprehensive statistics and insights into the global olive oil industry. These datasets form the foundation for exploring patterns, trends, and market dynamics, aiding in a deeper understanding of the olive oil sector.\nThis project involves the following three datasets:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#chemical-composition-of-olive-oil-for-various-categories",
    "href": "data.html#chemical-composition-of-olive-oil-for-various-categories",
    "title": "2  Data",
    "section": "2.2 Chemical Composition of Olive Oil for Various Categories",
    "text": "2.2 Chemical Composition of Olive Oil for Various Categories\nThis dataset examines the chemical composition of olive oil by analyzing the relationships between various fatty acids. It provides insights into the chemical profiles of different olive oil samples, which is crucial for understanding quality, regional characteristics, and classification. The dataset is commonly used in food science, quality assurance, and authentication studies to differentiate olive oils based on their chemical properties. This dataset enables a detailed exploration of how chemical profiles differ across regions, aiding in the identification of quality and origin of olive oil.\n\n2.2.1 Loading necessary libraries\n\n\nCode\noptions(warn = -1)\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\nlibrary(reshape2)\n\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\nCode\nlibrary(ggparallel)\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nCode\nlibrary(ggalluvial)\nlibrary(lubridate)\nlibrary(reshape2)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:scales':\n\n    viridis_pal\n\n\nCode\nlibrary(tidyr)\n\n\n\n\n2.2.2 Reading Data: OLIVE OIL COMPOSITION FOR VARIOUS CATEGORIES\n\n\nCode\nolive_oil &lt;- read.csv(\"olive_oil.csv\")\nhead(olive_oil)\n\n\n  category palmitico palmitoleico stearico   oleico linoleico eicosanoico\n1      NA  10.750000         0.75     2.26 78.23001      6.72        0.36\n2      NA  10.880000         0.73     2.24 77.09000      7.81        0.31\n3      NA   9.109999         0.54     2.46 81.13000      5.49        0.31\n4      NA   9.660000         0.57     2.40 79.52000      6.19        0.50\n5      NA  10.510000         0.67     2.59 77.71000      6.72        0.50\n6      NA   9.109999         0.49     2.68 79.24000      6.78        0.51\n  linolenico\n1       0.60\n2       0.61\n3       0.63\n4       0.78\n5       0.80\n6       0.70\n\n\n\n\n2.2.3 Check data summary\n\n\nCode\ntable(olive_oil$category)\n\n\n\nEL  NA  SA  U   WL  \n 50  25 206  51  50 \n\n\nCode\ncolSums(is.na(olive_oil))\n\n\n    category    palmitico palmitoleico     stearico       oleico    linoleico \n           0            0            0            0            0            0 \n eicosanoico   linolenico \n           0            0 \n\n\n\n\n2.2.4 Missing Value Analysis for Chemical Composition of Olive Oil\n\n\nCode\n# Check missing values in olive_oil dataset\nmissing_olive_oil &lt;- colSums(is.na(olive_oil))\n\n# Create a data frame for visualization\nmissing_olive_oil_df &lt;- data.frame(\n  Feature = names(missing_olive_oil),\n  MissingValues = missing_olive_oil\n)\n\n# Plot missing values\nggplot(missing_olive_oil_df, aes(x = Feature, y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\", alpha = 0.8) +\n  geom_text(aes(label = MissingValues), vjust = -0.5) +\n  labs(\n    title = \"Missing Values in Olive Oil Composition Dataset\",\n    x = \"Feature\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n2.2.5 Feature Selection: Correlation Matrix\n\n\nCode\n# Identifing feature columns\nfeatures_columns &lt;- c(\"palmitico\", \"palmitoleico\", \"stearico\", \n                      \"oleico\", \"linoleico\", \"eicosanoico\", \n                      \"linolenico\")\n\n# Dropping 'category' column to compute correlations\ncorr &lt;- cor(olive_oil[, features_columns])\n\n# Displaying features with strong correlations\nstrong_corr &lt;- melt(corr) %&gt;%\n  filter(value &gt; 0.5 & Var1 != Var2)\nprint(strong_corr)\n\n\n          Var1         Var2     value\n1 palmitoleico    palmitico 0.8633629\n2    linoleico    palmitico 0.7514547\n3    palmitico palmitoleico 0.8633629\n4    linoleico palmitoleico 0.8686865\n5    palmitico    linoleico 0.7514547\n6 palmitoleico    linoleico 0.8686865\n7   linolenico  eicosanoico 0.7421961\n8  eicosanoico   linolenico 0.7421961\n\n\n\n\n2.2.6 Calculating Number of Bins\n\n\nCode\n# Number of bins calculation based on the number of rows\nnumber_of_bins &lt;- 2 * round(sqrt(nrow(olive_oil)))\nnumber_of_bins\n\n\n[1] 40\n\n\n\n\n2.2.7 Scatter Histogram\n\n\nCode\nggplot(olive_oil, aes(x = palmitico, y = palmitoleico, color = category)) +\n  geom_point() +\n  geom_density_2d() +\n  labs(title = \"Scatter plot with density: Palmitico vs Palmitoleico\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n2.2.8 Histograms for Features\n\n\nCode\n# Create histograms for each feature\nfeatures_hist &lt;- function(data, feature, bins) {\n  ggplot(data, aes_string(x = feature)) +\n    geom_histogram(aes(y = ..density..), bins = bins, alpha = 0.4, fill = \"green\") +\n    geom_density(color = \"red\") +\n    labs(title = paste(\"Histogram with density:\", feature)) +\n    theme_minimal()\n}\n\n# Generate histograms for all features\nfor (feature in features_columns) {\n  print(features_hist(olive_oil, feature, number_of_bins))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.9 Box Plots\n\n\nCode\n# General box plot\nggplot(melt(olive_oil[, features_columns]), aes(x = variable, y = value)) +\n  geom_boxplot(outlier.size = 0.5) +\n  labs(title = \"Boxplots for all features\") +\n  theme_minimal()\n\n\nNo id variables; using all as measure variables\n\n\n\n\n\n\n\n\n\nCode\n# Box plots for each feature grouped by 'category'\nfeatures_boxplot &lt;- function(data, feature) {\n  ggplot(data, aes_string(x = \"category\", y = feature)) +\n    geom_boxplot(outlier.size = 0.5) +\n    labs(title = paste(\"Boxplot of\", feature, \"by Category\")) +\n    theme_minimal()\n}\n\n# Generate box plots for all features by category\nfor (feature in features_columns) {\n  print(features_boxplot(olive_oil, feature))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.10 Correlation Heatmap\n\n\nCode\n# Plot heatmap of correlations\nheatmap_corr &lt;- ggplot(melt(corr), aes(Var1, Var2, fill = value)) +\n  geom_tile() +\n  geom_text(aes(label = round(value, 2)), color = \"black\", size = 3) +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n  labs(title = \"Correlation Heatmap\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nheatmap_corr\n\n\n\n\n\n\n\n\n\n\n\n2.2.11 Parallel Coordinates\n\n\nCode\n# Standardize features\nolive_oil_standardized &lt;- olive_oil\nolive_oil_standardized[, features_columns] &lt;- scale(olive_oil_standardized[, features_columns])\n\n# Parallel coordinates plot\nggparcoord(\n  data = olive_oil_standardized,\n  columns = which(names(olive_oil_standardized) %in% features_columns),\n  groupColumn = \"category\",\n  scale = \"globalminmax\",\n  alphaLines = 0.5\n) +\n  scale_color_manual(values = c(\"#00ff45\", \"#4ECDC4\", \"#ff0000\", \"#fff121\", \"#001dd5\")) +\n  labs(title = \"Parallel Coordinates Plot\", x = \"Features\", y = \"Standardized Value\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n2.2.12 Key Insights:\n\nThe scatter plot reveals a compelling relationship between palmitic and palmitoleic acid concentrations across five distinct categories (EL, NA, SA, U, and WL), with the South Apulian (SA) samples displaying a notable positive correlation as they form a diagonal cluster extending from the middle to upper right of the plot (palmitic: 12-18, palmitoleic: 1.5-2.5), while the remaining categories (EL, NA, U, and WL) exhibit tighter clustering in the lower-middle portion with considerable overlap, showing palmitic values between 9-12 and palmitoleic values around 0.5-1.0, with density contours highlighting the concentration of points and a few outliers scattered beyond the main clusters, particularly within the SA group, demonstrating the varying relationships between these fatty acids across different sample categories.\nThe parallel coordinates and scatter plots reveal distinct patterns in fatty acid compositions across categories (EL, NA, SA, U, WL). The parallel plot highlights variations in seven fatty acids, with notable peaks in stearico acid for WL (blue lines) and differences in oleico and linoleico acids. The scatter plot emphasizes the relationship between palmitico and palmitoleico acids, showing SA (green) as a distinct cluster with higher values (palmitico: 12-18, palmitoleico: 1.5-2.5), while other categories cluster in the lower-mid range (palmitico: 9-12, palmitoleico: 0.5-1.0). Density contours in the scatter plot further highlight separation between SA and other groups, suggesting unique fatty acid profiles linked to origins or processing methods.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#olive-oil-prices-2023",
    "href": "data.html#olive-oil-prices-2023",
    "title": "2  Data",
    "section": "2.3 Olive Oil Prices (2023)",
    "text": "2.3 Olive Oil Prices (2023)\nThis dataset contains daily price data for different quality categories of olive oil in January 2023. It tracks the prices (in euros per kilogram) for three distinct types of olive oil: Extra Virgin Olive Oil (Premium Quality), Virgin Olive Oil, Lampante Olive Oil.\n\n2.3.1 Reading Data: OLIVE OIL PRICES 2023\n\n\nCode\ndf &lt;- read.csv(\"olive_prices_2023.csv\")\ncolnames(df)\n\n\n[1] \"Fecha\"               \"Precio.Virgen.extra\" \"Precio.Virgen\"      \n[4] \"Precio.Lampante\"    \n\n\n\n\n2.3.2 Missing Value Analysis for Olive Oil Prices (2023)\n\n\nCode\n# Check missing values in df\ndf_missing &lt;- colSums(is.na(df))\n\n# Create a data frame for visualization\ndf_missing_df &lt;- data.frame(\n  Feature = names(df_missing),\n  MissingValues = df_missing\n)\n\n# Plot missing values\nggplot(df_missing_df, aes(x = Feature, y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"darkgreen\", alpha = 0.8) +\n  geom_text(aes(label = MissingValues), vjust = -0.5) +\n  labs(\n    title = \"Missing Values in Olive Oil Prices Dataset (2023)\",\n    x = \"Feature\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n2.3.3 Function to Plot Olive Oil Prices\n\n\nCode\nplot_prices &lt;- function(df, year, save = FALSE) {\n  # Convert Date to Date format\n  df$Fecha &lt;- as.Date(df$Fecha, format = \"%Y-%m-%d\")\n  \n  # Melt data for ggplot\n  df_melted &lt;- melt(df, id.vars = \"Fecha\", variable.name = \"Category\", value.name = \"Price\")\n  \n  # Line Plot\n  p &lt;- ggplot(df_melted, aes(x = Fecha, y = Price, color = Category, group = Category)) +\n    geom_line(size = 1) +\n    labs(\n      title = paste(\"Olive Oil Prices (€/kg) -\", year),\n      x = \"Date\",\n      y = \"Price (€)\",\n      color = \"Category\"\n    ) +\n    theme_minimal() +\n    scale_x_date(\n      date_breaks = \"1 week\",\n      date_labels = \"%Y-%m-%d\"\n    ) +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n    scale_color_viridis_d()\n  \n  print(p)\n}\n\n\n\n\n2.3.4 Function to Plot Olive Oil Prices with Trendlines\n\n\nCode\nplot_prices_with_trend &lt;- function(df, year, save = FALSE) {\n  # Convert Date to Date format\n  df$Fecha &lt;- as.Date(df$Fecha, format = \"%Y-%m-%d\")\n  \n  # Melt data for ggplot\n  df_melted &lt;- melt(df, id.vars = \"Fecha\", variable.name = \"Category\", value.name = \"Price\")\n  \n  # Line Plot with Trendlines\n  p &lt;- ggplot(df_melted, aes(x = Fecha, y = Price, color = Category, group = Category)) +\n    geom_line(size = 1) +\n    geom_smooth(method = \"lm\", linetype = \"dashed\", se = FALSE) +\n    labs(\n      title = paste(\"Olive Oil Prices with Trendlines (€/kg) -\", year),\n      x = \"Date\",\n      y = \"Price (€)\",\n      color = \"Category\"\n    ) +\n    theme_minimal() +\n    scale_x_date(\n      date_breaks = \"1 week\",\n      date_labels = \"%Y-%m-%d\"\n    ) +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n    scale_color_viridis_d()\n  \n  print(p)\n}\n\n\n\n\n2.3.5 Function to Plot Heatmap of Monthly Olive Oil Prices\n\n\nCode\nplot_heatmap &lt;- function(df, year, save = FALSE) {\n  # Convert Fecha to Date format\n  df$Fecha &lt;- as.Date(df$Fecha, format = \"%Y-%m-%d\")\n  df$Month &lt;- month(df$Fecha)\n  \n  # Select the correct column for \"Extra Virgin Olive Oil Price\"\n  df$Price &lt;- df$Precio.Virgen.extra\n  \n  # Pivot data for heatmap\n  df_heatmap &lt;- df %&gt;%\n    select(Fecha, Month, Price) %&gt;%\n    group_by(Month, Fecha) %&gt;%\n    summarize(Price = mean(Price, na.rm = TRUE)) %&gt;%\n    spread(Fecha, Price)\n  \n  # Convert to matrix for heatmap\n  heatmap_data &lt;- as.matrix(df_heatmap[,-1])\n  rownames(heatmap_data) &lt;- month.name[df_heatmap$Month]\n  \n  # Heatmap Plot\n  heatmap_colors &lt;- viridis::viridis(100)\n  \n  heatmap(\n    heatmap_data,\n    Rowv = NA,\n    Colv = NA,\n    col = heatmap_colors,\n    scale = \"none\",\n    margins = c(5, 10),\n    main = paste(\"Heatmap of Monthly Prices (\", year, \")\", sep = \"\"),\n    xlab = \"Date\",\n    ylab = \"Month\"\n  )\n}\n\n\n\n\n2.3.6 Generating Plots\n\n\nCode\nplot_prices(df, 2023)\n\n\n\n\n\n\n\n\n\nCode\nplot_prices_with_trend(df, 2023)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nCode\nplot_heatmap(df, 2023)\n\n\n`summarise()` has grouped output by 'Month'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n2.3.7 Key Insights:\n\nThe line graph provides an insightful analysis of the price trends for three olive oil grades throughout 2023. The Extra Virgin Olive Oil (Precio.Virgen.extra), represented by a purple line, consistently holds the highest price among the three categories, with values climbing steadily and peaking above €8/kg towards the end of the year. The Virgin Olive Oil (Precio.Virgen), depicted with a teal line, maintains an intermediate price range, exhibiting a similar upward trajectory, albeit at slightly lower levels compared to Extra Virgin Olive Oil. Finally, the Lampante Olive Oil (Precio.Lampante), shown in yellow, reflects the lowest pricing, highlighting its classification as a lower-grade oil. Despite these differences, all three grades display a significant and consistent upward trend, with prices rising from approximately €5/kg at the beginning of 2023 to nearly €8/kg by the year’s end. This notable price surge, particularly in the latter half of 2023, underscores shifts in market dynamics, possibly driven by factors like production constraints, increased demand, or economic conditions impacting the olive oil industry globally.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#flow-of-olive-oil-between-countries",
    "href": "data.html#flow-of-olive-oil-between-countries",
    "title": "2  Data",
    "section": "2.4 Flow of Olive Oil Between Countries",
    "text": "2.4 Flow of Olive Oil Between Countries\nThis dataset captures the flow of olive oil between various countries or regions. The values represent quantities (e.g., tons or liters) exchanged between exporting and importing countries. It highlights major players in the olive oil trade, their destinations, and trade volumes. This dataset is essential for understanding the international olive oil trade, including major exporting and importing nations and trade dependencies.\n\n2.4.1 Missing Value Analysis for Flow of Olive Oil Between Countries\n\n\nCode\n# Define a function to check and visualize missing values for flow datasets\nplot_missing_flows &lt;- function(flow_data, title) {\n  # Calculate missing values\n  flow_missing &lt;- colSums(is.na(flow_data))\n\n  # Create a data frame for visualization\n  flow_missing_df &lt;- data.frame(\n    Feature = names(flow_missing),\n    MissingValues = flow_missing\n  )\n\n  # Plot missing values\n  ggplot(flow_missing_df, aes(x = Feature, y = MissingValues)) +\n    geom_bar(stat = \"identity\", fill = \"purple\", alpha = 0.8) +\n    geom_text(aes(label = MissingValues), vjust = -0.5) +\n    labs(\n      title = title,\n      x = \"Feature\",\n      y = \"Count of Missing Values\"\n    ) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n\n\n\n2.4.2 Reading & Plotting Data: FLOW - 2022-2023\n\n\nCode\n# Read the CSV file and handle row/column names\nflows &lt;- read.csv(\"FLOWS_1.csv\", check.names = FALSE, row.names = 1)\nplot_missing_flows(flows, \"Missing Values in Flow Dataset (2022-2023)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Remove the \"(all)\" row and column\nflows &lt;- flows[!rownames(flows) %in% \"(all)\", !colnames(flows) %in% \"(all)\"]\n\n# Calculate total flows for each source country\nflows$TotalFlow &lt;- rowSums(flows, na.rm = TRUE)\n\n# Select the top 5 countries with the highest total flows\ntop_n &lt;- 5  # Top 5 countries\ntop_countries &lt;- flows %&gt;%\n  arrange(desc(TotalFlow)) %&gt;%\n  head(top_n) %&gt;%\n  rownames()\n\n# Filter flows to only include the top countries\nflows_filtered &lt;- flows[top_countries, ]\nflows_filtered &lt;- flows_filtered[, !colnames(flows_filtered) %in% \"TotalFlow\"]\n\n# Convert the filtered dataset into a long format\nflows_long &lt;- flows_filtered %&gt;%\n  rownames_to_column(var = \"From\") %&gt;%\n  pivot_longer(cols = -From, names_to = \"To\", values_to = \"Flow\") %&gt;%\n  filter(!is.na(Flow) & Flow &gt; 0)  # Filter out NA and zero values\n\n# Add a third axis (Region or Category) for visualization purposes\nflows_long &lt;- flows_long %&gt;%\n  mutate(Category = ifelse(To %in% c(\"Extra-EU\", \"Intra-EU\"), \"EU\", \"Non-EU\"))\n\n# Create a multi-axis alluvial diagram\nggplot(flows_long,\n       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +\n  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +\n  geom_stratum(fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), size = 3) +\n  scale_x_discrete(limits = c(\"From\", \"Category\", \"To\")) +\n  labs(title = \"Multi-Axis Flow Between Top 5 Countries (2022-2023)\",\n       x = \"Flow Direction\",\n       y = \"Flow Magnitude\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",  # Remove the legend\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4.3 Reading & Plotting Data: FLOW - 2021-2022\n\n\nCode\n# Read the CSV file and handle row/column names\nflows &lt;- read.csv(\"FLOWS_2.csv\", check.names = FALSE, row.names = 1)\nplot_missing_flows(flows, \"Missing Values in Flow Dataset (2021-2022)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Remove the \"(all)\" row and column\nflows &lt;- flows[!rownames(flows) %in% \"(all)\", !colnames(flows) %in% \"(all)\"]\n\n# Calculate total flows for each source country\nflows$TotalFlow &lt;- rowSums(flows, na.rm = TRUE)\n\n# Select the top 5 countries with the highest total flows\ntop_n &lt;- 5  # Top 5 countries\ntop_countries &lt;- flows %&gt;%\n  arrange(desc(TotalFlow)) %&gt;%\n  head(top_n) %&gt;%\n  rownames()\n\n# Filter flows to only include the top countries\nflows_filtered &lt;- flows[top_countries, ]\nflows_filtered &lt;- flows_filtered[, !colnames(flows_filtered) %in% \"TotalFlow\"]\n\n# Convert the filtered dataset into a long format\nflows_long &lt;- flows_filtered %&gt;%\n  rownames_to_column(var = \"From\") %&gt;%\n  pivot_longer(cols = -From, names_to = \"To\", values_to = \"Flow\") %&gt;%\n  filter(!is.na(Flow) & Flow &gt; 0)  # Filter out NA and zero values\n\n# Add a third axis (Region or Category) for visualization purposes\nflows_long &lt;- flows_long %&gt;%\n  mutate(Category = ifelse(To %in% c(\"Extra-EU\", \"Intra-EU\"), \"EU\", \"Non-EU\"))\n\n# Create a multi-axis alluvial diagram\nggplot(flows_long,\n       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +\n  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +\n  geom_stratum(fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), size = 3) +\n  scale_x_discrete(limits = c(\"From\", \"Category\", \"To\")) +\n  labs(title = \"Multi-Axis Flow Between Top 5 Countries (2021-2022)\",\n       x = \"Flow Direction\",\n       y = \"Flow Magnitude\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",  # Remove the legend\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4.4 Reading & Plotting Data: FLOW - 2020-2021\n\n\nCode\n# Read the CSV file and handle row/column names\nflows &lt;- read.csv(\"FLOWS_3.csv\", check.names = FALSE, row.names = 1)\nplot_missing_flows(flows, \"Missing Values in Flow Dataset (2020-2021)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Remove the \"(all)\" row and column\nflows &lt;- flows[!rownames(flows) %in% \"(all)\", !colnames(flows) %in% \"(all)\"]\n\n# Calculate total flows for each source country\nflows$TotalFlow &lt;- rowSums(flows, na.rm = TRUE)\n\n# Select the top 5 countries with the highest total flows\ntop_n &lt;- 5  # Top 5 countries\ntop_countries &lt;- flows %&gt;%\n  arrange(desc(TotalFlow)) %&gt;%\n  head(top_n) %&gt;%\n  rownames()\n\n# Filter flows to only include the top countries\nflows_filtered &lt;- flows[top_countries, ]\nflows_filtered &lt;- flows_filtered[, !colnames(flows_filtered) %in% \"TotalFlow\"]\n\n# Convert the filtered dataset into a long format\nflows_long &lt;- flows_filtered %&gt;%\n  rownames_to_column(var = \"From\") %&gt;%\n  pivot_longer(cols = -From, names_to = \"To\", values_to = \"Flow\") %&gt;%\n  filter(!is.na(Flow) & Flow &gt; 0)  # Filter out NA and zero values\n\n# Add a third axis (Region or Category) for visualization purposes\nflows_long &lt;- flows_long %&gt;%\n  mutate(Category = ifelse(To %in% c(\"Extra-EU\", \"Intra-EU\"), \"EU\", \"Non-EU\"))\n\n# Create a multi-axis alluvial diagram\nggplot(flows_long,\n       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +\n  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +\n  geom_stratum(fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), size = 3) +\n  scale_x_discrete(limits = c(\"From\", \"Category\", \"To\")) +\n  labs(title = \"Multi-Axis Flow Between Top 5 Countries (2020-2021)\",\n       x = \"Flow Direction\",\n       y = \"Flow Magnitude\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",  # Remove the legend\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4.5 Reading & Plotting Data: FLOW - 2019-2020\n\n\nCode\n# Read the CSV file and handle row/column names\nflows &lt;- read.csv(\"FLOWS_4.csv\", check.names = FALSE, row.names = 1)\nplot_missing_flows(flows, \"Missing Values in Flow Dataset (2019-2020)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Remove the \"(all)\" row and column\nflows &lt;- flows[!rownames(flows) %in% \"(all)\", !colnames(flows) %in% \"(all)\"]\n\n# Calculate total flows for each source country\nflows$TotalFlow &lt;- rowSums(flows, na.rm = TRUE)\n\n# Select the top 5 countries with the highest total flows\ntop_n &lt;- 5  # Top 5 countries\ntop_countries &lt;- flows %&gt;%\n  arrange(desc(TotalFlow)) %&gt;%\n  head(top_n) %&gt;%\n  rownames()\n\n# Filter flows to only include the top countries\nflows_filtered &lt;- flows[top_countries, ]\nflows_filtered &lt;- flows_filtered[, !colnames(flows_filtered) %in% \"TotalFlow\"]\n\n# Convert the filtered dataset into a long format\nflows_long &lt;- flows_filtered %&gt;%\n  rownames_to_column(var = \"From\") %&gt;%\n  pivot_longer(cols = -From, names_to = \"To\", values_to = \"Flow\") %&gt;%\n  filter(!is.na(Flow) & Flow &gt; 0)  # Filter out NA and zero values\n\n# Add a third axis (Region or Category) for visualization purposes\nflows_long &lt;- flows_long %&gt;%\n  mutate(Category = ifelse(To %in% c(\"Extra-EU\", \"Intra-EU\"), \"EU\", \"Non-EU\"))\n\n# Create a multi-axis alluvial diagram\nggplot(flows_long,\n       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +\n  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +\n  geom_stratum(fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), size = 3) +\n  scale_x_discrete(limits = c(\"From\", \"Category\", \"To\")) +\n  labs(title = \"Multi-Axis Flow Between Top 5 Countries (2019-2020)\",\n       x = \"Flow Direction\",\n       y = \"Flow Magnitude\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",  # Remove the legend\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4.6 Reading & Plotting Data: FLOW - 2018-2019\n\n\nCode\n# Read the CSV file and handle row/column names\nflows &lt;- read.csv(\"FLOWS_5.csv\", check.names = FALSE, row.names = 1)\nplot_missing_flows(flows, \"Missing Values in Flow Dataset (2018-2019)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Remove the \"(all)\" row and column\nflows &lt;- flows[!rownames(flows) %in% \"(all)\", !colnames(flows) %in% \"(all)\"]\n\n# Calculate total flows for each source country\nflows$TotalFlow &lt;- rowSums(flows, na.rm = TRUE)\n\n# Select the top 5 countries with the highest total flows\ntop_n &lt;- 5  # Top 5 countries\ntop_countries &lt;- flows %&gt;%\n  arrange(desc(TotalFlow)) %&gt;%\n  head(top_n) %&gt;%\n  rownames()\n\n# Filter flows to only include the top countries\nflows_filtered &lt;- flows[top_countries, ]\nflows_filtered &lt;- flows_filtered[, !colnames(flows_filtered) %in% \"TotalFlow\"]\n\n# Convert the filtered dataset into a long format\nflows_long &lt;- flows_filtered %&gt;%\n  rownames_to_column(var = \"From\") %&gt;%\n  pivot_longer(cols = -From, names_to = \"To\", values_to = \"Flow\") %&gt;%\n  filter(!is.na(Flow) & Flow &gt; 0)  # Filter out NA and zero values\n\n# Add a third axis (Region or Category) for visualization purposes\nflows_long &lt;- flows_long %&gt;%\n  mutate(Category = ifelse(To %in% c(\"Extra-EU\", \"Intra-EU\"), \"EU\", \"Non-EU\"))\n\n# Create a multi-axis alluvial diagram\nggplot(flows_long,\n       aes(axis1 = From, axis2 = Category, axis3 = To, y = Flow)) +\n  geom_alluvium(aes(fill = From), alpha = 0.8, width = 1/12) +\n  geom_stratum(fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), size = 3) +\n  scale_x_discrete(limits = c(\"From\", \"Category\", \"To\")) +\n  labs(title = \"Multi-Axis Flow Between Top 5 Countries (2018-2019)\",\n       x = \"Flow Direction\",\n       y = \"Flow Magnitude\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",  # Remove the legend\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4.7 Key Insights:\n\nThe Multi-Axis Flow diagram for years 2018-2019 till 2022-2023 highlights intricate olive oil trade patterns. Spain leads as the top exporter (290,282), followed by Greece (153,938.1) and others like Argentina, Morocco, and Egypt. Flows are split between the EU (336,603.6) and non-EU (273,156.3) regions. Intra-EU trade dominates as the largest recipient (281,371.4), with significant imports by the USA (133,627.5) and Brazil (91,636.8). The diagram illustrates interconnected flows, with Spain and Greece exporting heavily to both EU and non-EU regions, and varying band widths and color-coded streams emphasizing trade complexities and magnitudes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Chemical Composition of Olive Oil for Various Categories:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#chemical-composition-of-olive-oil-for-various-categories",
    "href": "results.html#chemical-composition-of-olive-oil-for-various-categories",
    "title": "3  Results",
    "section": "",
    "text": "The analysis of fatty acid composition revealed distinct profiles across the five olive oil categories (EL, NA, SA, U, WL). Scatter plots highlighted a strong positive correlation between palmitic and palmitoleic acids for the South Apulian (SA) category, forming a distinct diagonal cluster (palmitic: 12-18, palmitoleic: 1.5-2.5). In contrast, the other categories clustered tightly in the lower-middle range (palmitic: 9-12, palmitoleic: 0.5-1.0), with density contours emphasizing the concentration and separation of groups.\nParallel coordinates plots further illustrated variations in fatty acid compositions, with notable peaks in stearic acid for WL and significant differences in oleic and linoleic acids across categories. These findings suggest unique chemical profiles linked to regional origins and processing methods, providing insights into the classification and quality of olive oil samples.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#olive-oil-prices-2023",
    "href": "results.html#olive-oil-prices-2023",
    "title": "3  Results",
    "section": "3.2 Olive Oil Prices (2023):",
    "text": "3.2 Olive Oil Prices (2023):\n\nThe price trends for three olive oil grades (Extra Virgin, Virgin, and Lampante) throughout 2023 showcased consistent upward movement. Extra Virgin Olive Oil maintained the highest price point, exceeding €8/kg towards the end of the year, reflecting its premium quality. Virgin Olive Oil followed an intermediate trajectory, while Lampante Olive Oil remained the lowest-priced category due to its lower quality.\nAll three grades demonstrated a significant price surge, particularly in the latter half of 2023, rising from approximately €5/kg to €8/kg. This upward trend highlights potential market drivers such as production constraints, increased global demand, and evolving economic conditions impacting the olive oil industry.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#flow-of-olive-oil-between-countries",
    "href": "results.html#flow-of-olive-oil-between-countries",
    "title": "3  Results",
    "section": "3.3 Flow of Olive Oil Between Countries:",
    "text": "3.3 Flow of Olive Oil Between Countries:\n\nThe Multi-Axis Flow diagrams across years (2018-2019 to 2022-2023) revealed intricate global trade patterns. Spain emerged as the leading exporter, followed by Greece, Argentina, Morocco, and Egypt. Flows were split between the EU (336,603.6) and non-EU (273,156.3) regions, with intra-EU trade dominating as the largest recipient (281,371.4), while the USA and Brazil were notable non-EU importers.\nThe diagrams highlighted the interconnected nature of trade, with Spain and Greece heavily exporting to both EU and non-EU regions. Color-coded streams and varying band widths visualized the flow magnitudes, reflecting complex trade dependencies and global distribution dynamics in the olive oil industry.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Scatterplot: Fatty Acid Composition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutcome of this Visualization\n\n\nThis interactive scatter plot showcases the relationship between Palmitic Acid and Palmitoleic Acid levels in olive oil samples from five regions:\n\n\n\nSA: South Apulia (highest concentration of both acids)\n\n\nEL: East Liguria\n\n\nNA: North Apulia\n\n\nWL: West Liguria\n\n\nU: Umbria\n\n\n\nWhen users hover over the points, an image of the associated region appears, helping them visualize the geographic origin of each sample. This visualization highlights the distinct fatty acid compositions and regional origins of the olive oil samples, providing an engaging way to explore and analyze the data.\n\n\n\n\n\nBar Chart: Major Olive Oil Producers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutcome of this Visualization\n\n\nThis bar chart provides insights into the leading producers of olive oil worldwide, showcasing their average annual production (in thousand tons). Hovering over each bar reveals the country’s flag, adding an engaging element to the data exploration experience. This visualization emphasizes the dominance of countries like Spain and Egypt in olive oil production, offering valuable insights for stakeholders in agriculture and trade.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive graph</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "5.1 Chemical Composition of Olive Oil for Various Categories:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "conclusion.html#chemical-composition-of-olive-oil-for-various-categories",
    "href": "conclusion.html#chemical-composition-of-olive-oil-for-various-categories",
    "title": "5  Conclusion",
    "section": "",
    "text": "The chemical composition analysis identified unique fatty acid profiles across olive oil categories, with significant variations in palmitic and palmitoleic acid concentrations. The South Apulian (SA) category stood out with distinct higher concentrations, suggesting unique regional or production characteristics. These findings provide valuable insights for categorizing and authenticating olive oil based on chemical properties.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "conclusion.html#olive-oil-prices-2023",
    "href": "conclusion.html#olive-oil-prices-2023",
    "title": "5  Conclusion",
    "section": "5.2 Olive Oil Prices (2023):",
    "text": "5.2 Olive Oil Prices (2023):\n\nThe steady and notable price increases for Extra Virgin, Virgin, and Lampante olive oils in 2023 highlight shifting market dynamics. The consistent upward trend, particularly in Extra Virgin Olive Oil, underscores the growing demand for premium-grade olive oils. These trends emphasize the importance of monitoring market conditions to understand pricing mechanisms and their impact on the olive oil industry.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "conclusion.html#flow-of-olive-oil-between-countries",
    "href": "conclusion.html#flow-of-olive-oil-between-countries",
    "title": "5  Conclusion",
    "section": "5.3 Flow of Olive Oil Between Countries:",
    "text": "5.3 Flow of Olive Oil Between Countries:\n\nThe trade flow analysis revealed Spain and Greece as dominant exporters, with significant trade volumes directed to both EU and non-EU regions. The intra-EU trade flows were the largest, indicating a robust internal market. The interconnected trade patterns highlight the global reliance on key exporting nations and the importance of understanding trade dependencies for better policy and market strategies.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]